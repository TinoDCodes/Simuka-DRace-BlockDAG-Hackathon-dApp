/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  RaceChainBetting,
  RaceChainBettingInterface,
} from "../../contracts/RaceChainBetting";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "tokenDecimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "betId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "odds",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "selectionId",
        type: "uint32",
      },
    ],
    name: "BetPlaced",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "betId",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "result",
        type: "string",
      },
    ],
    name: "BetSettled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "selectionId",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "position",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "impliedOdds",
        type: "uint16",
      },
    ],
    name: "SelectionOutcomeUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "bets",
    outputs: [
      {
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "odds",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "selectionId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "selectionId",
        type: "uint32",
      },
    ],
    name: "clearSelectionOutcome",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "betId",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "odds",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "selectionId",
        type: "uint32",
      },
    ],
    name: "placeBet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "selectionOutcomes",
    outputs: [
      {
        internalType: "uint8",
        name: "position",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "impliedOdds",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "selectionId",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "position",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "impliedOdds",
        type: "uint16",
      },
    ],
    name: "setSelectionOutcome",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "betId",
        type: "uint32",
      },
    ],
    name: "settleBet",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523461002b5761001a6100146100f4565b91610218565b6040516115766103a6823961157690f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006757604052565b610030565b9061008061007960405190565b9283610046565b565b6001600160a01b031690565b90565b61009a81610082565b0361002b57565b9050519061008082610091565b60ff811661009a565b90505190610080826100ae565b909160608284031261002b5761008e6100dd84846100a1565b9360406100ed82602087016100a1565b94016100b7565b61011261191c803803806101078161006c565b9283398101906100c4565b909192565b61008261008e61008e9290565b61008e90610117565b6020808252601d908201527f546f6b656e20616464726573732063616e6e6f74206265207a65726f21000000604082015260600190565b1561016b57565b60405162461bcd60e51b8152806101846004820161012d565b0390fd5b61008e90610082906001600160a01b031682565b61008e90610188565b61008e9061019c565b90610100600160a81b039060081b5b9181191691161790565b906101d761008e6101de926101a5565b82546101ae565b9055565b9060ff906101bd565b6101fb61008e61008e9260ff1690565b60ff1690565b9061021161008e6101de926101eb565b82546101e2565b610256610080939261022c61025d9361029c565b61025161024161023c6000610124565b610082565b61024a83610082565b1415610164565b6101a5565b60026101c7565b6002610201565b61008e61008e61008e9290565b61008e6001610264565b90600019906101bd565b9061029561008e6101de92610264565b825461027b565b6102a5906102d4565b6100806102b0610271565b6001610285565b6102c090610082565b9052565b60208101929161008091906102b7565b60006102df81610124565b6102e881610082565b6102f184610082565b1461030157505061008090610353565b631e4fbdf760e01b8252819061018490600483016102c4565b61008e90610082565b61008e905461031a565b906001600160a01b03906101bd565b9061034c61008e6101de926101a5565b825461032d565b61037461036e6103636000610323565b61025184600061033c565b916101a5565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e061039f60405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c8063034d4960146100a257806303f226141461009d578063672d3a7414610098578063715018a614610093578063776199861461008e5780637b2542b9146100895780638da5cb5b14610084578063ea335ea81461007f5763f2fde38b036100a757610479565b610433565b6103bd565b61037c565b610264565b61024c565b610228565b61018a565b6100e1565b600080fd5b63ffffffff81165b036100a757565b905035906100c8826100ac565b565b906020828203126100a7576100de916100bb565b90565b346100a7576100f96100f43660046100ca565b61056b565b60405180805b0390f35b6101166100de6100de9263ffffffff1690565b63ffffffff1690565b9061012990610103565b600052602052604060002090565b6100de905b60ff1690565b6100de9054610137565b6100de9060081c5b61ffff1690565b6100de905461014c565b61017090600461011f565b906100de600061017f84610142565b930161015b565b9052565b346100a7576101a261019d3660046100ca565b610165565b906100ff6101af60405190565b60ff909216825261ffff90921660208201529081906040820190565b60ff81166100b4565b905035906100c8826101cb565b61ffff81166100b4565b905035906100c8826101e1565b90916060828403126100a7576100de61021184846100bb565b93604061022182602087016101d4565b94016101eb565b346100a7576100f961023b3660046101f8565b916106f2565b60009103126100a757565b346100a75761025c366004610241565b6100f9610735565b346100a7576100ff61027f61027a3660046100ca565b610ca2565b60405191829182901515815260200190565b6100de9081565b6100de9054610291565b6100de90610154565b6100de90546102a2565b6100de9060101c610116565b6100de90546102b5565b6001600160a01b031690565b6100de9060301c6102cb565b6102cb565b6100de90546102d7565b6102fd90600361011f565b9061030782610298565b91610314600182016102ab565b916100de60016103258185016102c1565b93016102e8565b6100de906102cb565b6101869061032c565b6103756100c89461036860609498979561035d608086019a6000870152565b61ffff166020850152565b63ffffffff166040830152565b0190610335565b346100a7576100ff6103976103923660046100ca565b6102f2565b906103a494929460405190565b9485948561033e565b6020810192916100c89190610335565b346100a7576103cd366004610241565b6100ff6103d8610cb7565b604051918291826103ad565b806100b4565b905035906100c8826103e4565b6080818303126100a75761040b82826100bb565b926100de61041c84602085016103ea565b93606061042c82604087016101eb565b94016100bb565b346100a7576100f96104463660046103f7565b9291909161101a565b6100b48161032c565b905035906100c88261044f565b906020828203126100a7576100de91610458565b346100a7576100f961048c366004610465565b611078565b6100c89061049d611081565b610525565b61013c6100de6100de9290565b156104b657565b60405162461bcd60e51b815260206004820152601960248201527814d95b1958dd1a5bdb881bdd5d18dbdb59481b9bdd081cd95d603a1b604482015280606481015b0390fd5b634e487b7160e01b600052600060045260246000fd5b906000036105205760009055565b6104fc565b60006105666100c89261055f6105468461054084600461011f565b01610142565b610559610552866104a2565b9160ff1690565b116104af565b600461011f565b610512565b6100c890610491565b906100c89291610582611081565b610689565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176105be57604052565b610587565b906100c86105d060405190565b928361059d565b6100de60406105c3565b9060ff905b9181191691161790565b61013c6100de6100de9260ff1690565b906106106100de610617926105f0565b82546105e1565b9055565b9062ffff009060081b6105e6565b6101546100de6100de9261ffff1690565b9061064a6100de61061792610629565b825461061b565b6100c8916106799060209061067061066a825160ff1690565b85610600565b015161ffff1690565b9061063a565b906100c891610651565b916106e07fe9b29d792a9405688baf68c8fbd5d83724c808b47931b1b304d21d4815c2d9c192936106db6106bb6105d7565b60ff8716815261ffff851660208201526106d683600461011f565b61067f565b610103565b926106ed6101af60405190565b0390a2565b906100c89291610574565b610705611081565b6100c8610723565b6102e36100de6100de9290565b6100de9061070d565b6100c8610730600061071a565b6110e3565b6100c86106fd565b9061074f9161074a61113f565b610992565b906100c8611189565b906101869061032c565b6100de60806105c3565b906100c86107c8600161077d610762565b9461078e61078a82610298565b8752565b6107a761079c8383016102ab565b61ffff166020880152565b6107c26107b58383016102c1565b63ffffffff166040880152565b016102e8565b60608401610758565b6100de9061076c565b6100de905161032c565b156107eb57565b60405162461bcd60e51b8152602060048201526017602482015276151a1a5cc818995d08191bd95cc81b9bdd08195e1a5cdd604a1b6044820152606490fd5b1561083157565b60405162461bcd60e51b815260206004820152602d60248201527f556e617574686f72697a65643a206f6e6c79206f776e6572206f72206265747460448201526c6f722063616e20736574746c6560981b6064820152608490fd5b1561089357565b60405162461bcd60e51b815260206004820152602260248201527f4f7574636f6d65206e6f742073657420666f7220746869732073656c6563746960448201526137b760f11b6064820152608490fd5b9160001960089290920291821b911b6105e6565b6100de6100de6100de9290565b91906109156100de610617936108f7565b9083546108e3565b6100c891600091610904565b600090600190610939838261091d565b0155565b90600003610520576100c890610929565b6102e36100de6100de926102cb565b6100de9061094e565b6100de9061095d565b6101546100de6100de9290565b6100de9060081c6102cb565b6100de905461097c565b5060036109a76109a2838361011f565b6107d1565b906060820191836109b7846107da565b926109df6000946109d86109d26109cd8861071a565b61032c565b9161032c565b14156107e4565b6109ea6109cd610cb7565b6109f33361032c565b148015610c81575b610a049061082a565b604083016004610a3b610a2887610540610a22865163ffffffff1690565b8561011f565b610a34610552896104a2565b141561088c565b610a5686610540610a50855163ffffffff1690565b8461011f565b610a6060326104a2565b60ff82161115610b195750505083610ab793610a8f610abd96610a8a610ac39996610ab29661011f565b61093d565b610aac610a9c6002610988565b92610aa6866107da565b92015190565b9161122f565b6107da565b92610103565b91610966565b90600080516020611521833981519152610adc60405190565b6020808252601b908201527a2132ba103b37b4b232b2161039ba30b5b2903932ba3ab93732b21760291b604082015280606081015b0390a3600190565b610b2e610552600198969497989593956104a2565b03610c245794610ab79484610ab294610b55610ba39a97610a8a610b8a97610abd9c61011f565b602084015161ffff169283610b74610b6c8561096f565b9161ffff1690565b14610bf6575b5050909101516111c6565b6111c6565b610b946002610988565b610b9d846107da565b9061122f565b90600080516020611521833981519152610bbc60405190565b6020808252601c908201527b42657420776f6e202d207061796f7574207375636365737366756c2160201b60408201528060608101610b11565b610b859350610c17610c1d92610c1185935163ffffffff1690565b9061011f565b0161015b565b9138610b7a565b610abd9550610ab79450610ab29250610c42969391610a8a9161011f565b90600080516020611521833981519152610c5b60405190565b60208082526008908201526710995d081b1bdcdd60c21b60408201528060608101610b11565b50610a04610c916109cd876107da565b610c9a3361032c565b1490506109fb565b6100de90600061073d565b6100de905461032c565b6100de6000610cad565b90610cd5939291610cd061113f565b610ecf565b6100c8611189565b15610ce457565b60405162461bcd60e51b815260206004820152602160248201527f54686973206265742068617320616c7265616479206265656e20706c616365646044820152602160f81b6064820152608490fd5b15610d3a57565b60405162461bcd60e51b81526020600482015260156024820152745374616b652063616e6e6f74206265207a65726f2160581b6044820152606490fd5b15610d7e57565b60405162461bcd60e51b815260206004820152602360248201527f4f646473206d757374206265203e20312e30307820616e64203c3d203530302e60448201526206060f60eb1b6064820152608490fd5b90600019906105e6565b90610de96100de610617926108f7565b8254610dcf565b9061ffff906105e6565b90610e0a6100de61061792610629565b8254610df0565b9065ffffffff00009060101b6105e6565b90610e326100de61061792610103565b8254610e11565b90600160301b600160d01b039060301b6105e6565b90610e5e6100de61061792610966565b8254610e39565b90610ebf606060016100c894610e85610e7f600087015190565b82610dd9565b0192610e9f610e99602083015161ffff1690565b85610dfa565b610eb9610eb3604083015163ffffffff1690565b85610e22565b016107da565b90610e4e565b906100c891610e65565b917f956756997b62611747930036f89443fbd4f9b9ca9c5f5d9e30d82fd14203c88291610f1b610f0560016107c287600361011f565b610f156109d26109cd600061071a565b14610cdd565b610f2f610f2860006108f7565b8211610d33565b610f39606461096f565b61ffff83161180610ffd575b610f4e90610d77565b610f94610f59610762565b610f61838252565b61ffff8416602082015263ffffffff87166040820152610f843360608301610758565b610f8f86600361011f565b610ec5565b610fb381610fa26002610988565b610fab30610966565b9033906112a1565b610ff8610fc8610fc233610966565b95610103565b95610fd260405190565b9384938490815261ffff91909116602082015263ffffffff909116604082015260600190565b0390a3565b50610f4e61100c61c35061096f565b61ffff841611159050610f45565b906100c8939291610cc1565b6100c890611032611081565b600061103d8161071a565b6110468161032c565b61104f8461032c565b1461105f5750506100c8906110e3565b631e4fbdf760e01b825281906104f890600483016103ad565b6100c890611026565b611089610cb7565b33906110976109d28361032c565b0361109f5750565b63118cdaa760e01b6000908152906110b89060046103ad565b036000fd5b906001600160a01b03906105e6565b906110dc6100de61061792610966565b82546110bd565b611103610abd6110f36000610cad565b6110fe8460006110cc565b610966565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e061112e60405190565b8080610ff8565b6100de60026108f7565b6111496001610298565b611151611135565b90819061115d565b9190565b1461116d576100c8906001610dd9565b633ee5aeb560e01b6000908152600490fd5b6100de60016108f7565b6100c861119461117f565b6001610dd9565b6100de60646104a2565b6100de6100de6100de9261ffff1690565b6100de6100de6100de9260ff1690565b6100de916111e46111de6111d861119b565b926111a5565b916111b6565b91611310565b6112036111fd6100de9263ffffffff1690565b60e01b90565b6001600160e01b03191690565b9160206100c892949361122b60408201966000830190610335565b0152565b6112726004926112636100c89561124963a9059cbb6111ea565b9261125360405190565b9687946020860190815201611210565b6020820181038252038361059d565b611448565b60409061122b6100c8949695939661129760608401986000850190610335565b6020830190610335565b90611272906112636100c8956004956112bd6323b872dd6111ea565b936112c760405190565b9788956020870190815201611277565b634e487b7160e01b600052601260045260246000fd5b81156112f7570490565b6112d7565b6100de60126108f7565b6100de60116108f7565b9060009161131e82826114df565b92909160009461132d866108f7565b8414611439578387111561140d5785938761137d9461139097946001946100de9b9a50500990838211900392039561136c81611368876108f7565b0390565b811680808093049804950304010290565b17916113906113948261139060036108f7565b0290565b6113686114076114016113f26113e36113d46113c56002976113b5896108f7565b186113908b82026113688b6108f7565b6113908a82026113688a6108f7565b611390898202611368896108f7565b611390888202611368886108f7565b611390878202611368876108f7565b80950290565b916108f7565b6114348761141d611159896108f7565b146114266112fc565b61142e611306565b916114f3565b61150f565b505050506100de9291506112ed565b906000602091611456600090565b50828151910182855af1156114d3573d90600051600092611479611159856108f7565b036114bf575061148881610966565b3b611495611159846108f7565b145b61149f575050565b6104f86114ac8392610966565b635274afe760e01b8352600483016103ad565b6114cc61115960016108f7565b1415611497565b6040513d6000823e3d90fd5b906000198183099102908180821091030391565b6113908361150b93611503600090565b501891151590565b1890565b634e487b716000526020526024601cfdfe8fe42308c6f82f7ab2f5e6928b910a862b18c150e427c3ac0e749e2f7c51867fa2646970667358221220f4b9de3100b81b281c67058eb285953d92f1d810f2c5c679a6f321c8d4d8686864736f6c634300081c0033";

type RaceChainBettingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaceChainBettingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RaceChainBetting__factory extends ContractFactory {
  constructor(...args: RaceChainBettingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialOwner: AddressLike,
    _tokenAddress: AddressLike,
    tokenDecimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      initialOwner,
      _tokenAddress,
      tokenDecimals,
      overrides || {}
    );
  }
  override deploy(
    initialOwner: AddressLike,
    _tokenAddress: AddressLike,
    tokenDecimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      initialOwner,
      _tokenAddress,
      tokenDecimals,
      overrides || {}
    ) as Promise<
      RaceChainBetting & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RaceChainBetting__factory {
    return super.connect(runner) as RaceChainBetting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaceChainBettingInterface {
    return new Interface(_abi) as RaceChainBettingInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RaceChainBetting {
    return new Contract(address, _abi, runner) as unknown as RaceChainBetting;
  }
}
