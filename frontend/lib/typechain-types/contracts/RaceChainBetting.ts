/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RaceChainBettingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "clearFixedSelectionPosition"
      | "fixedBets"
      | "fixedSelectionPositions"
      | "owner"
      | "placeFixedBet"
      | "renounceOwnership"
      | "setFixedSelectionOutcome"
      | "settleFixedBet"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FixedBetPlaced"
      | "FixedBetSettled"
      | "FixedSelectionOutcomeUpdated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "clearFixedSelectionPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedBets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedSelectionPositions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeFixedBet",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedSelectionOutcome",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleFixedBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "clearFixedSelectionPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fixedBets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixedSelectionPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeFixedBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFixedSelectionOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleFixedBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FixedBetPlacedEvent {
  export type InputTuple = [
    user: AddressLike,
    betId: BigNumberish,
    stake: BigNumberish,
    odds: BigNumberish,
    selectionId: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    betId: bigint,
    stake: bigint,
    odds: bigint,
    selectionId: bigint
  ];
  export interface OutputObject {
    user: string;
    betId: bigint;
    stake: bigint;
    odds: bigint;
    selectionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FixedBetSettledEvent {
  export type InputTuple = [
    betId: BigNumberish,
    user: AddressLike,
    result: string
  ];
  export type OutputTuple = [betId: bigint, user: string, result: string];
  export interface OutputObject {
    betId: bigint;
    user: string;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FixedSelectionOutcomeUpdatedEvent {
  export type InputTuple = [selectionId: BigNumberish, position: BigNumberish];
  export type OutputTuple = [selectionId: bigint, position: bigint];
  export interface OutputObject {
    selectionId: bigint;
    position: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RaceChainBetting extends BaseContract {
  connect(runner?: ContractRunner | null): RaceChainBetting;
  waitForDeployment(): Promise<this>;

  interface: RaceChainBettingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  clearFixedSelectionPosition: TypedContractMethod<
    [selectionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fixedBets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        stake: bigint;
        odds: bigint;
        selectionId: bigint;
        user: string;
      }
    ],
    "view"
  >;

  fixedSelectionPositions: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  placeFixedBet: TypedContractMethod<
    [
      betId: BigNumberish,
      stake: BigNumberish,
      odds: BigNumberish,
      selectionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFixedSelectionOutcome: TypedContractMethod<
    [selectionId: BigNumberish, position: BigNumberish],
    [void],
    "nonpayable"
  >;

  settleFixedBet: TypedContractMethod<
    [betId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "clearFixedSelectionPosition"
  ): TypedContractMethod<[selectionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fixedBets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        stake: bigint;
        odds: bigint;
        selectionId: bigint;
        user: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fixedSelectionPositions"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeFixedBet"
  ): TypedContractMethod<
    [
      betId: BigNumberish,
      stake: BigNumberish,
      odds: BigNumberish,
      selectionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFixedSelectionOutcome"
  ): TypedContractMethod<
    [selectionId: BigNumberish, position: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleFixedBet"
  ): TypedContractMethod<[betId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FixedBetPlaced"
  ): TypedContractEvent<
    FixedBetPlacedEvent.InputTuple,
    FixedBetPlacedEvent.OutputTuple,
    FixedBetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "FixedBetSettled"
  ): TypedContractEvent<
    FixedBetSettledEvent.InputTuple,
    FixedBetSettledEvent.OutputTuple,
    FixedBetSettledEvent.OutputObject
  >;
  getEvent(
    key: "FixedSelectionOutcomeUpdated"
  ): TypedContractEvent<
    FixedSelectionOutcomeUpdatedEvent.InputTuple,
    FixedSelectionOutcomeUpdatedEvent.OutputTuple,
    FixedSelectionOutcomeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "FixedBetPlaced(address,uint32,uint256,uint16,uint32)": TypedContractEvent<
      FixedBetPlacedEvent.InputTuple,
      FixedBetPlacedEvent.OutputTuple,
      FixedBetPlacedEvent.OutputObject
    >;
    FixedBetPlaced: TypedContractEvent<
      FixedBetPlacedEvent.InputTuple,
      FixedBetPlacedEvent.OutputTuple,
      FixedBetPlacedEvent.OutputObject
    >;

    "FixedBetSettled(uint32,address,string)": TypedContractEvent<
      FixedBetSettledEvent.InputTuple,
      FixedBetSettledEvent.OutputTuple,
      FixedBetSettledEvent.OutputObject
    >;
    FixedBetSettled: TypedContractEvent<
      FixedBetSettledEvent.InputTuple,
      FixedBetSettledEvent.OutputTuple,
      FixedBetSettledEvent.OutputObject
    >;

    "FixedSelectionOutcomeUpdated(uint32,uint8)": TypedContractEvent<
      FixedSelectionOutcomeUpdatedEvent.InputTuple,
      FixedSelectionOutcomeUpdatedEvent.OutputTuple,
      FixedSelectionOutcomeUpdatedEvent.OutputObject
    >;
    FixedSelectionOutcomeUpdated: TypedContractEvent<
      FixedSelectionOutcomeUpdatedEvent.InputTuple,
      FixedSelectionOutcomeUpdatedEvent.OutputTuple,
      FixedSelectionOutcomeUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
